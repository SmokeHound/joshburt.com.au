openapi: 3.0.0
info:
  title: joshburt.com.au API
  description: Serverless API for joshburt.com.au e-commerce platform
  version: 1.0.0
  contact:
    name: API Support
    email: api@joshburt.com.au
  license:
    name: MIT

servers:
  - url: https://joshburt.netlify.app/.netlify/functions
    description: Production server
  - url: https://staging--joshburt.netlify.app/.netlify/functions
    description: Staging server
  - url: http://localhost:8888/.netlify/functions
    description: Local development server

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Users
    description: User management
  - name: Products
    description: Product catalog
  - name: Orders
    description: Order management
  - name: Consumables
    description: Workshop consumables
  - name: Audit
    description: Audit logging
  - name: System
    description: System health and configuration

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from /auth login endpoint

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [user, staff, manager, admin]
        is_active:
          type: boolean
        avatar_url:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        last_login:
          type: string
          format: date-time
          nullable: true
    
    Product:
      type: object
      properties:
        id:
          type: integer
        code:
          type: string
        name:
          type: string
        type:
          type: string
        size:
          type: string
        viscosity:
          type: string
        price:
          type: number
          format: decimal
        description:
          type: string
        in_stock:
          type: boolean
        stock_quantity:
          type: integer
        created_at:
          type: string
          format: date-time
    
    Order:
      type: object
      properties:
        id:
          type: integer
        order_number:
          type: string
        customer_name:
          type: string
        customer_email:
          type: string
          format: email
        customer_phone:
          type: string
        total_amount:
          type: number
          format: decimal
        status:
          type: string
          enum: [pending, processing, shipped, delivered, cancelled]
        payment_method:
          type: string
        shipping_address:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        created_at:
          type: string
          format: date-time
    
    OrderItem:
      type: object
      properties:
        product_id:
          type: integer
        quantity:
          type: integer
        unit_price:
          type: number
          format: decimal
        subtotal:
          type: number
          format: decimal
    
    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object
          nullable: true

paths:
  /health:
    get:
      summary: Health check
      description: Returns system health status and metrics
      tags: [System]
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  timestamp:
                    type: string
                    format: date-time
                  database:
                    type: object
                    properties:
                      status:
                        type: string
                      driver:
                        type: string
        '503':
          description: System is degraded
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: degraded
                  error:
                    type: string

  /auth:
    post:
      summary: Authentication actions
      description: Handles login, registration, token refresh, and password reset
      tags: [Authentication]
      parameters:
        - in: query
          name: action
          required: true
          schema:
            type: string
            enum: [login, register, refresh, logout, forgot-password, reset-password, me, verify-email]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - title: Login
                  type: object
                  properties:
                    email:
                      type: string
                      format: email
                    password:
                      type: string
                - title: Register
                  type: object
                  properties:
                    email:
                      type: string
                      format: email
                    password:
                      type: string
                    name:
                      type: string
                - title: Refresh
                  type: object
                  properties:
                    refreshToken:
                      type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  refreshToken:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users:
    get:
      summary: List users
      description: Get list of all users (admin/manager only)
      tags: [Users]
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 50
        - in: query
          name: role
          schema:
            type: string
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      pages:
                        type: integer
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

    post:
      summary: Create user
      description: Create a new user (admin only)
      tags: [Users]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, name, password]
              properties:
                email:
                  type: string
                  format: email
                name:
                  type: string
                password:
                  type: string
                role:
                  type: string
                  enum: [user, staff, manager, admin]
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /users/{id}:
    get:
      summary: Get user by ID
      description: Get specific user details
      tags: [Users]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '404':
          description: User not found

    patch:
      summary: Update user
      description: Update user information
      tags: [Users]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                role:
                  type: string
                is_active:
                  type: boolean
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found

    delete:
      summary: Delete user
      description: Delete a user (admin only)
      tags: [Users]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found

  /products:
    get:
      summary: List products
      description: Get list of all products
      tags: [Products]
      parameters:
        - in: query
          name: type
          schema:
            type: string
        - in: query
          name: in_stock
          schema:
            type: boolean
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

    post:
      summary: Create product
      description: Add new product (admin/manager only)
      tags: [Products]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [code, name, type, price]
              properties:
                code:
                  type: string
                name:
                  type: string
                type:
                  type: string
                size:
                  type: string
                viscosity:
                  type: string
                price:
                  type: number
                description:
                  type: string
                stock_quantity:
                  type: integer
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /products/{id}:
    get:
      summary: Get product by ID
      description: Get specific product details
      tags: [Products]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found

    patch:
      summary: Update product
      description: Update product information
      tags: [Products]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                price:
                  type: number
                description:
                  type: string
                stock_quantity:
                  type: integer
                in_stock:
                  type: boolean
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Product not found

  /orders:
    get:
      summary: List orders
      description: Get list of orders
      tags: [Orders]
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 50
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  pagination:
                    type: object
        '401':
          description: Unauthorized

    post:
      summary: Create order
      description: Place a new order
      tags: [Orders]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [customer_name, customer_email, items]
              properties:
                customer_name:
                  type: string
                customer_email:
                  type: string
                  format: email
                customer_phone:
                  type: string
                shipping_address:
                  type: string
                payment_method:
                  type: string
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      product_id:
                        type: integer
                      quantity:
                        type: integer
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request
        '401':
          description: Unauthorized

  /orders/{id}:
    get:
      summary: Get order by ID
      description: Get specific order details
      tags: [Orders]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
        '404':
          description: Order not found

    patch:
      summary: Update order status
      description: Update order status (staff/manager/admin only)
      tags: [Orders]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [pending, processing, shipped, delivered, cancelled]
      responses:
        '200':
          description: Order updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Order not found

  /audit-logs:
    get:
      summary: Get audit logs
      description: Retrieve audit log entries (admin/manager only)
      tags: [Audit]
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: action
          schema:
            type: string
        - in: query
          name: userId
          schema:
            type: integer
        - in: query
          name: startDate
          schema:
            type: string
            format: date-time
        - in: query
          name: endDate
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Audit log entries
          content:
            application/json:
              schema:
                type: object
                properties:
                  logs:
                    type: array
                    items:
                      type: object
                  pagination:
                    type: object
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /public-config:
    get:
      summary: Get public configuration
      description: Get public site configuration (unauthenticated)
      tags: [System]
      responses:
        '200':
          description: Public configuration
          content:
            application/json:
              schema:
                type: object
                properties:
                  siteTitle:
                    type: string
                  features:
                    type: object
                  auth0Config:
                    type: object
