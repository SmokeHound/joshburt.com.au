-- Migration: Add product categories
-- Week 11-12: Product Enhancements
-- Compatible with both PostgreSQL and SQLite

-- Create product_categories table
CREATE TABLE IF NOT EXISTS product_categories (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name VARCHAR(100) UNIQUE NOT NULL,
    description TEXT,
    parent_id INTEGER REFERENCES product_categories(id) ON DELETE SET NULL,
    display_order INTEGER DEFAULT 0,
    is_active BOOLEAN DEFAULT 1,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Add category_id to products table (check if column exists first)
-- Note: SQLite doesn't support IF NOT EXISTS for ALTER TABLE ADD COLUMN in older versions
-- The migration script should handle this with try/catch

ALTER TABLE products ADD COLUMN category_id INTEGER REFERENCES product_categories(id) ON DELETE SET NULL;

-- Add stock and active status columns for filtering
ALTER TABLE products ADD COLUMN stock_quantity INTEGER DEFAULT 0;
ALTER TABLE products ADD COLUMN is_active BOOLEAN DEFAULT 1;

-- Create product_variants table for size/color options
CREATE TABLE IF NOT EXISTS product_variants (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    product_id INTEGER REFERENCES products(id) ON DELETE CASCADE,
    variant_type VARCHAR(50) NOT NULL, -- 'size', 'color', etc.
    variant_value VARCHAR(100) NOT NULL,
    stock_quantity INTEGER DEFAULT 0,
    sku VARCHAR(100) UNIQUE,
    is_active BOOLEAN DEFAULT 1,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(product_id, variant_type, variant_value)
);

-- Create product_images table for multiple images
CREATE TABLE IF NOT EXISTS product_images (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    product_id INTEGER REFERENCES products(id) ON DELETE CASCADE,
    image_url TEXT NOT NULL,
    alt_text VARCHAR(255),
    display_order INTEGER DEFAULT 0,
    is_primary BOOLEAN DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Insert default categories for automotive products
INSERT OR IGNORE INTO product_categories (name, description, display_order) VALUES
('Engine Oil', 'High-performance engine oils for all vehicle types', 1),
('Coolant', 'Engine cooling system fluids and additives', 2),
('Brake Fluid', 'Hydraulic brake and clutch fluids', 3),
('Gear Oil', 'Transmission and differential lubricants', 4),
('Specialty Fluids', 'Power steering, hydraulic and other specialty fluids', 5);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_products_category_id ON products(category_id);
CREATE INDEX IF NOT EXISTS idx_products_is_active ON products(is_active);
CREATE INDEX IF NOT EXISTS idx_product_categories_name ON product_categories(name);
CREATE INDEX IF NOT EXISTS idx_product_categories_parent_id ON product_categories(parent_id);
CREATE INDEX IF NOT EXISTS idx_product_variants_product_id ON product_variants(product_id);
CREATE INDEX IF NOT EXISTS idx_product_images_product_id ON product_images(product_id);

-- Update existing products with category based on type
UPDATE products SET category_id = (SELECT id FROM product_categories WHERE name = 'Engine Oil') WHERE type = 'Engine Oil' AND category_id IS NULL;
UPDATE products SET category_id = (SELECT id FROM product_categories WHERE name = 'Coolant') WHERE type = 'Coolant' AND category_id IS NULL;
UPDATE products SET category_id = (SELECT id FROM product_categories WHERE name = 'Brake Fluid') WHERE type = 'Brake Fluid' AND category_id IS NULL;
UPDATE products SET category_id = (SELECT id FROM product_categories WHERE name = 'Gear Oil') WHERE type = 'Gear Oil' AND category_id IS NULL;
